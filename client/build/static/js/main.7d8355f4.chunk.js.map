{"version":3,"sources":["serviceWorker.js","context/auth.js","util/AuthRoute.js","components/MenuBar.js","components/Tooltip.js","components/LikeButton.js","util/graphql.js","components/DeleteButton.js","components/PostCard.js","util/hooks.js","components/PostForm.js","pages/Home.js","pages/Login.js","pages/Register.js","pages/SinglePost.js","App.js","ApolloProvider.js","index.js"],"names":["Boolean","window","location","hostname","match","initialState","user","localStorage","getItem","decodedToken","jwtDecode","exp","Date","now","removeItem","AuthContext","createContext","login","userData","logout","authReducer","state","action","type","payload","AuthProvider","props","useReducer","dispatch","Provider","value","setItem","token","AuthRoute","Component","component","rest","useContext","render","to","MenuBar","pathname","path","substr","useState","activeItem","setActiveItem","handleItemClick","e","name","Menu","pointing","secondary","size","color","Item","username","active","as","Link","position","onClick","Tooltip","content","children","Popup","inverted","trigger","LIKE_POST_MUTATION","gql","LikeButton","post","id","likeCount","likes","liked","setLiked","useEffect","find","like","useMutation","variables","postId","likePost","likeButton","Button","Icon","basic","labelPosition","Label","FETCH_POSTS_QUERY","DELETE_POST_MUTATION","DELETE_COMMENT_MUTATION","DeleteButton","commentId","callback","confirmOpen","setConfirmOpen","mutation","update","proxy","data","readQuery","query","newData","getPosts","filter","p","writeQuery","deletePostorMutation","floated","style","margin","Confirm","open","onCancel","onConfirm","PostCard","body","createdAt","commentCount","Card","fluid","Content","Image","src","Header","Meta","moment","fromNow","Description","extra","useForm","values","setValues","onChange","event","target","onSubmit","preventDefault","CREATE_POST_MUTATION","PostForm","createPost","result","error","Form","Field","Input","placeholder","className","marginBottom","graphQLErrors","message","Home","useQuery","loading","posts","Grid","columns","Row","Column","Transition","Group","map","key","LOGIN_USER","Login","context","errors","setErrors","loginUser","password","_","history","push","onError","err","extensions","exception","noValidate","label","primary","Object","keys","length","REGISTER_USER","Register","addUser","confirmPassword","email","register","SUBMIT_COMMENT_MUTATION","FETCH_POST_QUERY","SinglePost","postMarkup","params","commentInputRef","useRef","comment","setComment","getPost","current","blur","submitComment","comments","width","float","console","log","ref","disabled","trim","App","Container","exact","httpLink","createHttpLink","uri","authLink","setContext","headers","Authorization","client","ApolloClient","link","concat","cache","InMemoryCache","ReactDOM","ApolloProvider","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.7d8355f4.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { createContext, useReducer } from 'react';\nimport jwtDecode from 'jwt-decode';\n\n\nconst initialState = {\n    user: null\n}\n\nif(localStorage.getItem('jwtToken')){\n    const decodedToken = jwtDecode(localStorage.getItem('jwtToken'))\n    if(decodedToken.exp * 1000 < Date.now()){\n        localStorage.removeItem('jwtToken')\n    } else { \n        initialState.user = decodedToken;\n    }\n}\n\nconst AuthContext = createContext({\n    user: null,\n    login: (userData) => {},\n    logout: () => {}\n});\n\nfunction authReducer(state, action){\n    switch(action.type){\n        case 'LOGIN':\n            return{\n                ...state,\n                user: action.payload\n            }\n        case 'LOGOUT':\n            return{\n                ...state,\n                user: null\n            }\n        default:\n            return state;\n    }\n}\n\nfunction AuthProvider(props){\n    const [state, dispatch] = useReducer(authReducer, initialState);\n\n    function login(userData){\n        localStorage.setItem(\"jwtToken\", userData.token);\n        dispatch({\n            type: 'LOGIN',\n            payload: userData\n        });\n    } \n\n    function logout(){\n        localStorage.removeItem('jwtToken');\n        dispatch({ type: 'LOGOUT'});\n    }\n\n    return (\n        <AuthContext.Provider\n            value={{ user: state.user, login, logout}}\n            {...props}\n            />\n    )\n}\n\nexport { AuthContext, AuthProvider }","import React, { useContext } from 'react';\nimport  { Route, Redirect } from 'react-router-dom';\n\nimport { AuthContext } from '../context/auth';\n\nfunction AuthRoute({ component: Component, ...rest }){\n    const { user } = useContext(AuthContext);\n\n    return(\n        <Route \n            {...rest}\n            render={props => \n                user ? <Redirect to=\"/\"/> : <Component {...props}/>\n            }\n        />\n    )\n}\n\nexport default AuthRoute;","import React, { useContext, useState } from 'react';\nimport { Menu } from 'semantic-ui-react';\nimport { Link } from 'react-router-dom';\n\nimport { AuthContext } from '../context/auth';\n\nfunction MenuBar() {\n  const { user, logout } = useContext(AuthContext);\n  const pathname = window.location.pathname;\n\n  const path = pathname === '/' ? 'home' : pathname.substr(1);\n  const [activeItem, setActiveItem] = useState(path);\n\n  const handleItemClick = (e, { name }) => setActiveItem(name);\n\n  const menuBar = user ? (\n\n    <Menu pointing secondary size=\"massive\" color=\"teal\">\n    <Menu.Item\n      name={user.username}\n      active\n      as={Link}\n      to=\"/\"\n    />\n    <Menu.Menu position='right'>\n    <Menu.Item\n      name='logout'\n      onClick={logout}\n    />\n    </Menu.Menu>\n  </Menu>\n\n  ) : ( \n\n  <Menu pointing secondary size=\"massive\" color=\"teal\">\n  <Menu.Item\n    name='home'\n    active={activeItem === 'home'}\n    onClick={handleItemClick}\n    as={Link}\n    to=\"/\"\n  />\n  <Menu.Menu position='right'>\n  <Menu.Item\n    name='login'\n    active={activeItem === 'login'}\n    onClick={handleItemClick}\n    as={Link}\n    to=\"/Login\"\n  />\n    <Menu.Item\n      name='register'\n      active={activeItem === 'register'}\n      onClick={handleItemClick}\n      as={Link}\n    to=\"/Register\"\n    />\n  </Menu.Menu>\n</Menu>\n)\n\n    return menuBar;\n  }\nexport default MenuBar;","import React from 'react';\nimport { Popup } from 'semantic-ui-react';\n\nfunction Tooltip({content, children}){\n    return <Popup inverted content={content} trigger={children}/>\n    }\n    export default Tooltip","import React, { useEffect, useState} from 'react';\nimport { Link } from 'react-router-dom';\nimport { gql, useMutation } from '@apollo/client';\n\nimport { Button, Label, Icon } from 'semantic-ui-react';\n\nimport Tooltip from './Tooltip';\n\nfunction LikeButton({ user, post: {id, likeCount, likes}}){\n    const [liked, setLiked] = useState(false);\n    useEffect(() => { \n        if(user && likes.find(like => like.username === user.username)){\n            setLiked(true)\n        } else setLiked(false)\n    }, [user, likes]);\n\n    const [likePost] = useMutation(LIKE_POST_MUTATION, {\n        variables: { postId: id }\n    })\n\n    const likeButton = user ? (\n        liked ? (\n            <Button color='teal'>\n            <Icon name='heart' />\n          </Button>\n        ) : (\n            <Button color='teal' basic>\n            <Icon name='heart outline' />\n          </Button>\n        )\n    ) : (\n        <Button as={Link} to=\"/login\" color='teal' basic>\n        <Icon name='heart outline' />\n      </Button>\n    )\n\n    return(\n        <Button as='div' labelPosition='right' onClick={likePost}>\n       <Tooltip content={liked ? 'Unlike' : 'Like'}>\n           {likeButton}\n       </Tooltip>\n        <Label basic color='teal' pointing='left'>\n          {likeCount}\n        </Label>\n        </Button>\n    )\n}\n\nconst LIKE_POST_MUTATION = gql`\n    mutation LikePost($postId: ID!){\n        likePost(postId: $postId){\n            id\n            likes{\n                id username\n            }\n            likeCount\n        }\n    }\n\n\n\n`\n\n\n\nexport default LikeButton","import { gql } from '@apollo/client';\n\nexport const FETCH_POSTS_QUERY = gql`\n    {\n    getPosts{\n     id\n     body\n     createdAt\n     username\n     likeCount\n     likes{\n        username\n    }\n    commentCount\n    comments{\n        id\n        username\n        createdAt\n        body\n        }\n      } \n}`","import React, { useState } from 'react';\nimport { gql, useMutation } from '@apollo/client'\nimport { Button, Confirm, Icon } from 'semantic-ui-react';\n\nimport { FETCH_POSTS_QUERY } from '../util/graphql';\nimport Tooltip from './Tooltip';\n\n// import {  } from \"\";\n\nfunction DeleteButton({ postId, commentId, callback }){\n    const [confirmOpen, setConfirmOpen] = useState(false); \n    const mutation = commentId ? DELETE_COMMENT_MUTATION : DELETE_POST_MUTATION\n\n        const [deletePostorMutation] = useMutation(mutation, { \n            update(proxy){\n                setConfirmOpen(false);\n               if(!commentId){\n                const data = proxy.readQuery({\n                    query: FETCH_POSTS_QUERY\n                });\n\n               let newData = data.getPosts.filter(p => p.id !== postId);\n                proxy.writeQuery({\n                     query: FETCH_POSTS_QUERY,\n                     data: { ...data, getPosts: { newData } }\n                    });\n\n               }\n                if(callback) callback();\n            }, \n            variables: {\n                postId,\n                commentId\n            }\n        });\n    return(\n        <>\n        <Tooltip content={commentId ? 'Delete comment' : 'Delete post'}>\n        <Button as=\"div\" color=\"red\" floated=\"right\" onClick={() => setConfirmOpen(true)}>\n            <Icon name=\"trash\" style = {{ margin: 0 }} />\n            </Button>\n            </Tooltip> \n        <Confirm \n            open={confirmOpen}\n            onCancel={() => setConfirmOpen(false)}\n            onConfirm={deletePostorMutation}\n            />\n            </>\n    )\n};\n\nconst DELETE_POST_MUTATION = gql`\n  mutation deletePost($postId: ID!) {\n    deletePost(postId: $postId)\n  }\n`;\n\nconst DELETE_COMMENT_MUTATION = gql`\n    mutation deleteComment($postId: ID!, $commentId: ID!){\n        deleteComment(postId: $postId,  commentId: $commentId){\n            id\n            comments{\n                id\n                username\n                createdAt\n                body\n            }\n            commentCount\n        }\n    }\n\n`;\n\nexport default DeleteButton","import React, { useContext } from 'react';\nimport { Button, Card, Icon, Label, Image } from 'semantic-ui-react';\nimport { Link } from 'react-router-dom';\nimport moment from 'moment';\n\nimport { AuthContext } from  '../context/auth';\nimport LikeButton from './LikeButton';\nimport DeleteButton from './DeleteButton';\nimport Tooltip from './Tooltip'\n\nfunction PostCard({ \n  post: { body, createdAt, id, username, likeCount, commentCount, likes }\n}) {\n  const { user } = useContext(AuthContext);\n\n    return(\n        <Card fluid>\n      <Card.Content>\n        <Image floated='right' size='mini' src='https://react.semantic-ui.com/images/avatar/large/molly.png'/>\n        <Card.Header>{username}</Card.Header>\n        <Card.Meta as={Link} to={`/posts/${id}`}>{moment(createdAt).fromNow(true)}</Card.Meta>\n        <Card.Description>{body}</Card.Description>\n      </Card.Content>\n      <Card.Content extra>\n   <LikeButton user={user} post={{ id, likes, likeCount }}/>\n   <Tooltip content=\"Comment on a post\">\n   <Button labelPosition='right' as={Link} to={`/posts/${id}`}>\n     <Button color='blue' basic>\n       <Icon name='comment alternate outline' />\n     </Button>\n     <Label basic color='blue' pointing='left'>\n       {commentCount}\n     </Label>\n   </Button>\n      </Tooltip>\n    { user && user.username === username && <DeleteButton postId={id}/>}\n      </Card.Content>\n    </Card>\n    )\n} \n\nexport default PostCard","import { useState } from 'react'\n\nexport const useForm = (callback, initialState = {}) => {\n    const [values, setValues] = useState(initialState);\n\n    const onChange = (event) => {\n        setValues({ ...values, [event.target.name]: event.target.value});\n    };\n\n    const onSubmit = event => {\n        event.preventDefault();\n        callback();\n    };\n\n    return {\n        onChange,\n        onSubmit,\n        values\n    };\n\n};","import React from 'react';\nimport { Button, Form } from 'semantic-ui-react'; \nimport { gql, useMutation } from '@apollo/client';\n\n\nimport { useForm } from '../util/hooks';\nimport { FETCH_POSTS_QUERY } from '../util/graphql';\n\nfunction PostForm(){\n    \n    const { values, onChange, onSubmit } = useForm(createPostCallback, {\n        body: ''\n    });\n\n    const [createPost, { error }] = useMutation(CREATE_POST_MUTATION, {\n        variables: values,\n        update(proxy, result) {\n            const data = proxy.readQuery({\n                 query: FETCH_POSTS_QUERY\n            });\n\n            let newData = [ ...data.getPosts ];\n            newData = [result.data.getPosts,  ...data.getPosts ];\n            proxy.writeQuery({ \n                query: FETCH_POSTS_QUERY, \n                data: { ...data, getPosts: { newData } }\n            });\n            values.body = '';\n        }\n    });\n\n   function createPostCallback(){\n        createPost()\n    };\n\n    return(\n        <>\n        <Form onSubmit={onSubmit}>\n            <h2>Create a post:</h2>\n            <Form.Field>\n                <Form.Input\n                    placeholder=\"Hey, AbSocial!\"\n                    name=\"body\"\n                    onChange={onChange}\n                    value={values.body}\n                    error={error ? true : false }\n                    />\n                    <Button type=\"submit\" color=\"teal\">\n                        Submit\n                    </Button>\n            </Form.Field>\n        </Form>\n        {error && (\n            <div className=\"ui error message\" style={{marginBottom: 20 }}>\n            <ul className=\"list\">\n                <li>{error.graphQLErrors[0].message}</li>\n            </ul>\n            </div>\n        )}\n        </>\n    );\n}\n\nconst CREATE_POST_MUTATION = gql`\n\nmutation createPost($body: String!){\n    createPost(body: $body){\n        id body createdAt username\n        likes{\n            id username createdAt\n        }\n        likeCount\n        comments{\n            id body username createdAt\n        }\n        commentCount\n    }\n}\n`\n\nexport default PostForm;","import React, { useContext } from 'react';\nimport { useQuery } from '@apollo/client';\nimport { Grid, Transition } from 'semantic-ui-react';\n\nimport { AuthContext } from '../context/auth';\nimport PostCard from '../components/PostCard';\nimport PostForm from '../components/PostForm';\nimport { FETCH_POSTS_QUERY } from '../util/graphql';\n\nfunction Home() {\n\nconst { user } = useContext(AuthContext);\n\n    const {\n      loading,\n      data: { getPosts: posts } = {}\n    } = useQuery(FETCH_POSTS_QUERY);\n\n    return (\n        <Grid columns={3}>\n            <Grid.Row className=\"page-title\">\n                <h1>Recent Posts</h1>\n            </Grid.Row>\n        <Grid.Row>\n            {user && (\n                <Grid.Column>\n                    <PostForm/>\n                </Grid.Column>\n            )}\n        {loading ? (\n            <h1>Loading posts...</h1>\n        ) : (\n            <Transition.Group>\n                {posts.map(post =>(\n                <Grid.Column key={post.id} style={{ marginBottom: 20}}>\n                    <PostCard post={post} />\n                </Grid.Column>\n            ))}\n            </Transition.Group>\n        )}\n        </Grid.Row>\n        </Grid>\n    );\n}\n\nexport default Home;","import React, { useContext, useState } from 'react';\nimport { Button, Form } from 'semantic-ui-react';\nimport { gql, useMutation } from '@apollo/client';\n\nimport { AuthContext } from '../context/auth';\nimport { useForm } from '../util/hooks';\n\n\nfunction Login(props) {\n    const context = useContext(AuthContext)\n    const [errors, setErrors] = useState({});\n\n    const { onChange, onSubmit, values } = useForm(loginUserCallback, {\n        username: '',\n        password: ''\n    });\n\n    const [loginUser, { loading }] = useMutation(LOGIN_USER, {\n        update(_, { data: { login: userData}}){\n            context.login(userData)\n            props.history.push('/')\n        },\n        onError(err){\n            setErrors(err.graphQLErrors[0].extensions.exception.errors);\n        },\n        variables: values\n    });\n\n    function loginUserCallback() {\n        loginUser();\n    }; \n\n    return (\n        <div className=\"form-container\">\n            <Form onSubmit={onSubmit} noValidate className={loading ? 'loading' : ''}>\n                <h1>Login</h1>\n                <Form.Input\n                label=\"username\"\n                placeholder=\"Username...\"\n                name=\"username\"\n                type=\"text\"\n                value={values.username}\n                error={errors.username ? true : false}\n                onChange={onChange}\n                />\n                <Form.Input\n                label=\"Password\"\n                placeholder=\"Password...\"\n                name=\"password\"\n                type=\"password\"\n                value={values.password}\n                error={errors.password ? true : false}\n                onChange={onChange}\n                />\n                <Button type=\"submit\" primary>\n                Login \n                </Button>   \n            </Form>\n            {Object.keys(errors).length > 0 && (<div className=\"ui error message\">\n                <ul className=\"list\">\n                    {Object.values(errors).map(value => (\n                        <li key={value}>{value}</li>\n                    ))}\n                </ul>\n                </div> )}\n        </div>\n\n    );\n}\n\nconst LOGIN_USER = gql`\n\nmutation login(\n    $username: String!\n    $password: String!\n) {\n    login(username: $username, password: $password) {\n        id \n        email \n        username \n        createdAt \n        token\n    }\n}\n`\n\nexport default Login;","import React, { useContext, useState } from 'react';\nimport { Button, Form } from 'semantic-ui-react';\nimport { gql, useMutation } from '@apollo/client';\n\nimport { AuthContext } from '../context/auth';\nimport { useForm } from '../util/hooks';\n\nfunction Register(props) {\n    const context = useContext(AuthContext)\n    const [errors, setErrors] = useState({});\n\n    const { onChange, onSubmit, values } = useForm(registerUser, {\n            username: '',\n            password: '',\n            confirmPassword: '',\n            email: ''\n    });\n\n    const [addUser, { loading }] = useMutation(REGISTER_USER, {\n        update(_, { data: { register: userData}}){\n            context.login(userData)\n            props.history.push('/')\n        },\n        onError(err){\n            setErrors(err.graphQLErrors[0].extensions.exception.errors);\n        },\n        variables: values\n    });\n\n    function registerUser(){\n        addUser();\n    };\n\n    return (\n        <div className=\"form-container\">\n            <Form onSubmit={onSubmit} noValidate className={loading ? 'loading' : ''}>\n                <h1>Register</h1>\n                <Form.Input\n                label=\"username\"\n                placeholder=\"Username...\"\n                name=\"username\"\n                type=\"text\"\n                value={values.username}\n                error={errors.username ? true : false}\n                onChange={onChange}\n                />\n                <Form.Input\n                label=\"Email\"\n                placeholder=\"Email...\"\n                name=\"email\"\n                type=\"email\"\n                value={values.email}\n                error={errors.email ? true : false}\n                onChange={onChange}\n                />\n                <Form.Input\n                label=\"Password\"\n                placeholder=\"Password...\"\n                name=\"password\"\n                type=\"password\"\n                value={values.password}\n                error={errors.password ? true : false}\n                onChange={onChange}\n                />\n                <Form.Input\n                label=\"Confirm Password\"\n                placeholder=\"Confirm Password...\"\n                name=\"confirmPassword\"\n                type=\"password\"\n                value={values.confirmPassword}\n                error={errors.confirmPassword ? true : false}\n                onChange={onChange}\n                />\n                <Button type=\"submit\" primary>\n                Register \n                </Button>   \n            </Form>\n            {Object.keys(errors).length > 0 && (<div className=\"ui error message\">\n                <ul className=\"list\">\n                    {Object.values(errors).map(value => (\n                        <li key={value}>{value}</li>\n                    ))}\n                </ul>\n                </div> )}\n        </div>\n\n    );\n}\n\nconst REGISTER_USER = gql`\n\nmutation register(\n    $username: String!\n    $email: String!\n    $password: String!\n    $confirmPassword: String!\n) {\n    register(\n        registerInput: {\n            username: $username\n            email: $email\n            password: $password\n            confirmPassword: $confirmPassword\n        }\n    ){\n        id email username createdAt token\n    }\n}\n`\n\nexport default Register;","import React, { useContext, useState, useRef } from 'react';\nimport { gql, useQuery, useMutation } from '@apollo/client';\nimport { Card, Form, Image, Grid, Button, Label, Icon } from 'semantic-ui-react';\nimport moment from 'moment';\nimport LikeButton from '../components/LikeButton';\nimport DeleteButton from '../components/DeleteButton';\nimport Tooltip from '../components/Tooltip';\n\nimport { AuthContext } from '../context/auth';\n\nfunction SinglePost(props) {\n    const postId = props.match.params.postId;\n    const { user } = useContext(AuthContext);\n    const commentInputRef = useRef(null);\n\n    const [comment, setComment] = useState('');\n  \n    const {\n      data: { getPost } = {}\n    } = useQuery(FETCH_POST_QUERY, {\n      variables: {\n        postId\n      }\n    });\n\n    const [submitComment] = useMutation(SUBMIT_COMMENT_MUTATION, {\n        update(){\n            setComment('');\n            commentInputRef.current.blur();\n        }, \n        variables: {\n            postId,\n            body: comment\n        }\n    });\n\n\nfunction deletePostCallback(){\n    props.history.push('/')\n}\n\nlet postMarkup;\n\nif(!getPost){\n    postMarkup = <p>Loading Post...</p>\n} else {\n    const { id, body, createdAt, username, comments, likes, likeCount, commentCount } = getPost;\n\n    postMarkup = (\n        <Grid>\n            <Grid.Row>\n                <Grid.Column width={2}>\n                <Image  src=\"https://react.semantic-ui.com/images/avatar/large/molly.png\" size=\"small\" float=\"right\"/>\n                </Grid.Column>\n            </Grid.Row>\n            <Grid.Row>\n                <Grid.Column width={10}>\n                <Card fluid>\n                    <Card.Content>\n                        <Card.Header>{username}</Card.Header>\n                        <Card.Meta>{moment(createdAt).fromNow()}</Card.Meta>\n                        <Card.Description>{body}</Card.Description>\n                    </Card.Content>\n                    <hr/>\n                    <Card.Content extra>\n                        <LikeButton user={user} post={{ id, likeCount, likes }}/>\n                      <Tooltip content=\"Comment on post\">\n                      <Button as=\"div\" labelPosition=\"right\" onClick={() => console.log('comment added on post')}>\n                            <Button basic color=\"blue\">\n                                <Icon name=\"comment alternate outline\"/>\n                            </Button>\n                            <Label basic color=\"blue\" pointing=\"left\">\n                                {commentCount}\n                                </Label>\n                        </Button>\n                      </Tooltip>\n                        {user && user.username === username && (\n                            <DeleteButton postId={id} callback={deletePostCallback} />\n                        )}\n                    </Card.Content>\n                </Card>\n                {user && <Card fluid>\n                        <Card.Content>\n                        <p>Post a comment</p>\n                        <Form>\n                            <div className=\"ui action input fluid\">\n                                <input type=\"text\" placeholder=\"What's on your mind...\" name=\"comment\" value={comment} onChange={event => setComment(event.target.value)} ref={commentInputRef}/>\n                                <Button type=\"submit\" className=\"ui button teal\" disabled={comment.trim() ===''} onClick={submitComment}>\n                                    Submit\n                                </Button>\n                            </div>\n                        </Form>\n                        </Card.Content>\n                    </Card>\n                }\n                {comments.map(comment => (\n                    <Card fluid key={comment.id}>\n                        <Card.Content>\n                            {user && user.username === comment.username && (\n                                <DeleteButton postId={id} commentId={comment.id}/>\n                            )}\n                        <Card.Header>{comment.username}</Card.Header>\n                        <Card.Meta>{moment(comment.createdAt).fromNow()}</Card.Meta>\n                        <Card.Description>{comment.body}</Card.Description>\n                        </Card.Content>\n                    </Card>\n                ))}\n\n                </Grid.Column>\n            </Grid.Row>\n        </Grid>\n    )\n\n}\n return postMarkup;\n}\n\nconst SUBMIT_COMMENT_MUTATION = gql`\n    mutation($postId: ID!, $body: String!){\n        createComment(postId: $postId, body: $body){\n            id\n            comments{\n                id\n                body\n                createdAt\n                username\n            }\n            commentCount\n        }\n    }\n\n`\n\n\nconst FETCH_POST_QUERY = gql`\n  query($postId: ID!) {\n    getPost(postId: $postId) {\n      id\n      body\n      createdAt\n      username\n      likeCount\n      likes {\n        username\n      }\n      commentCount\n      comments {\n        id\n        username\n        createdAt\n        body\n      }\n    }\n  }\n`;\n\nexport default SinglePost","import React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport { Container } from 'semantic-ui-react'\n\nimport 'semantic-ui-css/semantic.min.css';\nimport './App.css';\n\nimport { AuthProvider } from './context/auth';\nimport AuthRoute from './util/AuthRoute';\n\nimport MenuBar from './components/MenuBar';\nimport Home from './pages/Home';\nimport Login from './pages/Login';\nimport Register from './pages/Register';\nimport SinglePost from './pages/SinglePost';\n\nfunction App() {\n  return (\n    <AuthProvider>\n      <Router>\n      <Container>\n         <MenuBar/>\n         <Route exact path='/' component={Home}/>\n         <AuthRoute exact path=\"/login\" component={Login}/>\n         <AuthRoute exact path=\"/register\" component={Register}/> \n         <Route exact path=\"/posts/:postId\" component={SinglePost}/>\n      </Container>\n    </Router>\n    </AuthProvider>\n  );\n}\n\nexport default App;\n","import React from 'react'\nimport App from './App'\nimport { InMemoryCache, ApolloClient, createHttpLink, ApolloProvider } from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\n\nconst httpLink = createHttpLink({\n    uri: 'http://10.0.1.155:50000'\n});\n\nconst authLink = setContext(() => {\n    const token = localStorage.getItem('jwtToken');\n    return{\n        headers: {\n            Authorization: token ? `Bearer ${token}` : ''\n        }\n    }\n});\n\nconst client = new ApolloClient({\n    link: authLink.concat(httpLink),\n    cache: new InMemoryCache()\n});\n\nexport default (\n    <ApolloProvider client={client}>\n        <App/>\n    </ApolloProvider>\n);","import ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport ApolloProvider from './ApolloProvider'\n\nReactDOM.render(ApolloProvider, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}